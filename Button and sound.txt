#Connect button to gpio pins of pi and play music
Hardware:
1.rasberry pi
2.breadboard
3.4 tactile switches as button
5.wires

Software:
gpiozero module:
libav-tools
install libav-tools

step1-Create a new directory to store all files.
step2.
mkdir my-new-directory
enter your new directory:
cd my-new-directory


Copying the sample sounds
Using the same method as before, create a new directory called samples inside your gpio-music-box directory.

There are lots of sample sounds stored in /opt/sonic-pi/etc/samples. Copy all the sample sounds into your gpio-music-box/samples directory.

--------------------------------------------------------------

3.Convert samples of files(.flac) to (.wav)
by libav tools>
  sudo apt update && sudo apt install libav-tools -y
Check that the software has installed by typing the following into the terminal:

  avconv -version
To convert sound or video files from one format to another, you can use this basic command:

  avconv -i input.ext1 output.ext2
For instance, to convert a wav file (.wav) into an mp3 file (.mp3), you would type:

  avconv -i my_video.wav my_video.mp3



-------------------------------------------------------------
Code:
Create instrument to see if sample files run on them
1.to play a sound file
> install pygame


Code:
import pygame
pygame.init()
my_sound=pygame.mixer.Sound('path')
my_sound.play()


Creating your virtual instruments
You’re going to need four sounds to use in your GPIO music box.
To do this you can:
import and initialise the pygame module
create four different sound objects using four different .wav files
Save your Python file in your gpio-music-box directory by clicking on ‘File’ and ‘Save’.

import pygame
py.init()

drum=pygame.mixer.Sound("sample/drum_tom_mid_hard.wav")
cymbal=pygame.mixer.Sound("sample/drum_cymbal_mid_hard.wav")
snare=pygame.mixer.Sound("sample/drum_snare_mid_hard.wav")
bell=pygame.mixer.Sound("sample/drum_cowbell_mid_hard.wav")


Connect button to gpio pins
Button Programming:
from gpiozero import Button
btn=Button(17)

def hello():
 print("hello")

btn.when_pressed=hello

eg:
from gpiozero import Button,LED
btn=Button(17)
led=LED(4)
btn.when_pressed=led.on



Final Code
import pygame
from gpiozero import Button

pygame.init()

btn_drum=Button(4)
btn_cymbal=Button(17)
btn_snare=Button(27)
btn_bell=Button(10)

drum=pygame.mixer.Sound("sample/drum_tom_mid_hard.wav")
cymbal=pygame.mixer.Sound("sample/drum_cymbal_mid_hard.wav")
snare=pygame.mixer.Sound("sample/drum_snare_mid_hard.wav")
bell=pygame.mixer.Sound("sample/drum_cowbell_mid_hard.wav")


btn_drum.when_pressed=drum.play
btn_cymbal.when_pressed=cymbal.play
btn_snare.when_pressed=snare.play
btn_bell.when_pressed=bell.play




--------------------------------------------------------------Simplified code:
import pygame
from gpiozero import Button

pygame.init()
button_sounds={
       Button(4):pygame.mixer.Sound("samples/drum_tom_mid_hard.wav")
  Button(17):pygame.mixer.Sound("samples/drum_cymbal_hard.wav")
  Button(27):pygame.mixer.Sound("samples/drum_snare_hard.wav")
  Button(10):pygame.mixer.Sound("samples/drum_cowbell.wav")


for button,sound in button_sounds.items():
 button.when_pressed=sound.play

